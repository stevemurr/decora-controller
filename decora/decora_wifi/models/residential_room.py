# Leviton Cloud Services API model ResidentialRoom.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ResidentialRoom(BaseModel):
    def __init__(self, session, model_id=None):
        super(ResidentialRoom, self).__init__(session, model_id)

    @classmethod
    def count(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/count"
        return session.call_api(api, attribs, 'get')

    def count_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_residential_areas(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialAreas/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_residential_scenes(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialScenes/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def create(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms"
        return session.call_api(api, attribs, 'post')

    def create_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_many(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms"
        return session.call_api(api, attribs, 'post')

    def create_residential_areas(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialAreas".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_residential_scenes(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialScenes".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_residential_areas(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialAreas".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_residential_scenes(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialScenes".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_iot_switches(self, iot_switch_id, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches/{1}".format(self._id, iot_switch_id)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_residential_areas(self, residential_area_id, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialAreas/{1}".format(self._id, residential_area_id)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_residential_scenes(self, residential_scene_id, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialScenes/{1}".format(self._id, residential_scene_id)
        return self._session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def exists_residential_areas(self, residential_area_id, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialAreas/rel/{1}".format(self._id, residential_area_id)
        return self._session.call_api(api, attribs, 'head')

    @classmethod
    def find(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms"
        items = session.call_api(api, attribs, 'get')

        result = []
        if items is not None:
            for data in items:
                model = ResidentialRoom(session, data['id'])
                model.data = data
                result.append(model)
        return result

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.data.update(data)
        return self

    def find_by_id_iot_switches(self, iot_switch_id, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches/{1}".format(self._id, iot_switch_id)
        data = self._session.call_api(api, attribs, 'get')

        from .iot_switch import IotSwitch
        model = IotSwitch(self._session, data['id'])
        model.data = data
        return model

    def find_by_id_residential_areas(self, residential_area_id, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialAreas/{1}".format(self._id, residential_area_id)
        data = self._session.call_api(api, attribs, 'get')

        from .residential_area import ResidentialArea
        model = ResidentialArea(self._session, data['id'])
        model.data = data
        return model

    def find_by_id_residential_scenes(self, residential_scene_id, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialScenes/{1}".format(self._id, residential_scene_id)
        data = self._session.call_api(api, attribs, 'get')

        from .residential_scene import ResidentialScene
        model = ResidentialScene(self._session, data['id'])
        model.data = data
        return model

    @classmethod
    def find_one(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/findOne"
        return session.call_api(api, attribs, 'get')

    def refresh(self):
        api = "/ResidentialRooms/{0}".format(self._id)
        result = self._session.call_api(api, {}, 'get')
        if result is not None:
            self.data.update(result)
        return self

    def get_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches".format(self._id)
        items = self._session.call_api(api, attribs, 'get')

        from .iot_switch import IotSwitch
        result = []
        if items is not None:
            for data in items:
                model = IotSwitch(self._session, data['id'])
                model.data = data
                result.append(model)
        return result

    def get_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residence".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        from .residence import Residence
        model = Residence(self._session, data['id'])
        model.data = data
        return model

    def get_residential_areas(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialAreas".format(self._id)
        items = self._session.call_api(api, attribs, 'get')

        from .residential_area import ResidentialArea
        result = []
        if items is not None:
            for data in items:
                model = ResidentialArea(self._session, data['id'])
                model.data = data
                result.append(model)
        return result

    def get_residential_scenes(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialScenes".format(self._id)
        items = self._session.call_api(api, attribs, 'get')

        from .residential_scene import ResidentialScene
        result = []
        if items is not None:
            for data in items:
                model = ResidentialScene(self._session, data['id'])
                model.data = data
                result.append(model)
        return result

    def link_residential_areas(self, residential_area_id, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialAreas/rel/{1}".format(self._id, residential_area_id)
        data = self._session.call_api(api, attribs, 'put')

        from .residential_area import ResidentialArea
        model = ResidentialArea(self._session, data['id'])
        model.data = data
        return model

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def replace_or_create(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/replaceOrCreate"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def turn_off(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/turnOff"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def turn_on(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/turnOn"
        return session.call_api(api, attribs, 'post')

    def unlink_residential_areas(self, residential_area_id, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialAreas/rel/{1}".format(self._id, residential_area_id)
        return self._session.call_api(api, attribs, 'delete')

    def update_attributes(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'put')

        self.data.update(attribs)
        return self

    def update_by_id_iot_switches(self, iot_switch_id, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches/{1}".format(self._id, iot_switch_id)
        data = self._session.call_api(api, attribs, 'put')

        from .iot_switch import IotSwitch
        model = IotSwitch(self._session, data['id'])
        model.data = data
        return model

    def update_by_id_residential_areas(self, residential_area_id, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialAreas/{1}".format(self._id, residential_area_id)
        data = self._session.call_api(api, attribs, 'put')

        from .residential_area import ResidentialArea
        model = ResidentialArea(self._session, data['id'])
        model.data = data
        return model

    def update_by_id_residential_scenes(self, residential_scene_id, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residentialScenes/{1}".format(self._id, residential_scene_id)
        data = self._session.call_api(api, attribs, 'put')

        from .residential_scene import ResidentialScene
        model = ResidentialScene(self._session, data['id'])
        model.data = data
        return model

    @classmethod
    def upsert(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms"
        data = session.call_api(api, attribs, 'put')

        model = ResidentialRoom(session, data['id'])
        model.data = data
        return model

    @classmethod
    def upsert_with_where(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/upsertWithWhere"
        return session.call_api(api, attribs, 'post')

